#!/bin/bash

set -e

git pull origin master

##### Install programs #####
sudo add-apt-repository -y ppa:git-core/ppa
sudo add-apt-repository -y ppa:neovim-ppa/unstable

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install -y ddgr
sudo apt-get install -y gcc
sudo apt-get install -y git
sudo apt-get install -y jq
sudo apt-get install -y lynx
sudo apt-get install -y neofetch
sudo apt-get install -y neovim
sudo apt-get install -y nodejs
sudo apt-get install -y ripgrep

##### Command line configs #####
git config --global core.filemode false
git config --global push.autoSetupRemote true
git config --global user.name "Zach Gharst"
git config --global user.email "zdgharst@gmail.com"
git config --global init.defaultBranch "main"
git config --global credential.helper store

##### Add RC symbolic links #####
ln -sf "$PWD/.bashrc" "$HOME/.bashrc"
ln -sf "$PWD/.inputrc" "$HOME/.inputrc"
ln -sf "$PWD/.tmux.conf" "$HOME/.tmux.conf"
ln -sf "$PWD/.vimrc" "$HOME/.vimrc"

mkdir -p "$HOME/.config" || true
ln -sf "$PWD/nvim" "$HOME/.config"

##### Install Go #####
sudo rm -rf /usr/local/go
wget https://go.dev/dl/go1.20.5.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz
rm go1.20.5.linux-amd64.tar.gz

export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

##### Install Go programs #####
go install github.com/rwxrob/pomo/cmd/pomo@latest
pomo init
pomo delete interval

go install github.com/zachgharst/emojimaker@latest
go install github.com/zachgharst/zet/cmd/zet@latest

rm -rf $MYGH/zettels
git clone https://github.com/zachgharst/zettels $MYGH/zettels || true
zet populatedb || true

##### Install Julia programs #####
sudo rm -rf /usr/local/julia
wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.4-linux-x86_64.tar.gz
sudo tar -C /usr/bin -xzf julia-1.9.4-linux-x86_64.tar.gz
sudo ln -s /usr/bin/julia-1.9.4/bin/julia /usr/bin/julia
rm julia-1.9.4-linux-x86_64.tar.gz

julia --project=~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.add("LanguageServer")'


##### JavaScript #####
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

nvm install node
npm install -g typescript typescript-language-server svelte-language-server
sudo apt-get install -y unzip
curl -fsSL https://bun.sh/install | bash

##### Neovim #####
rm -rf ~/.local/share/nvim/site/pack/packer/start/packer.nvim
git clone --depth 1 https://github.com/wbthomason/packer.nvim \
 ~/.local/share/nvim/site/pack/packer/start/packer.nvim || true
# Currently broken:
# nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

##### Other setup scripts #####
[[ -n "$WSL_DISTRO_NAME" ]] && echo "Current environment is in WSL - running WSL setup" && cd $PWD/wsl && "$PWD/setup" && cd -

response="?"
while [[ "$response" != "y" ]] && [[ "$response" != "n" ]]; do
  echo "Do you want to also run your microsoft setup? (y/n)"
  read response
done

if [[ "$response" == "y" ]]; then
  cd "$PWD/microsoft"
  "$PWD/setup"
  cd -
fi
